workspace "Monitoring System Architecture" "C4 model diagrams for the Monitoring System (using HTTP and RabbitMQ)" {

    model {
        developer = person "Developer" "A developer who uses the web application to interact with the Monitoring System."

        # Group the Monitoring System under a named group
        group "Monitoring System" {
            monitoring_system = softwareSystem "Monitoring System" "Collects and processes logs, metrics, and traces using HTTP requests and RabbitMQ."{
                
                # Containers inside the Monitoring System
                monitoring_api = container "Monitoring API" "Exposes API for sending and retrieving logs, metrics, and traces via HTTP and RabbitMQ." "C#, .NET"{
                     logging_controller = component "LoggingController" "Handles logging requests from the web application via HTTP and RabbitMQ." "C#"
                     metrics_controller = component "MetricsController" "Handles metrics requests from the web application via HTTP and RabbitMQ." "C#"
                     tracing_controller = component "TracingController" "Handles tracing requests from the web application via HTTP and RabbitMQ." "C#"
                     log_service_requester = component "LogServiceRequester" "Sends HTTP log service requests to LoggingService." "C#"
                     message_publisher = component "MessagePublisher" "Publishes log events to RabbitMQ." "C#"
                }

                logging_service = container "Logging Service" "Processes and stores logs." "C#, .NET"{
                    log_events_controller = component "LogEventsController" "Handles HTTP GET requests for retrieving logs." "C#"
                    log_service = component "LogService" "Manages log processing and retrieval via HTTP." "C#"
                }

                metrics_service = container "Metrics Service" "Processes and stores metrics data." "C#, .NET"{
                    metrics_events_controller = component "MetricsEventsController" "Handles HTTP GET requests for retrieving logs." "C#"
                    metrics_event_service = component "MetricsEventService" "Manages metrics processing and retrieval via HTTP." "C#"
                }

                tracing_service = container "Tracing Service" "Manages distributed tracing data." "C#, .NET"{
                    tracing_events_controller = component "TracingEventsController" "Handles HTTP GET requests for retrieving logs." "C#"
                    tracing_event_service = component "TracingEventService" "Manages traces processing and retrieval via HTTP." "C#"
                }
            }

        }

        # External systems that the Monitoring System interacts with
        rabbitmq = softwareSystem "RabbitMQ" "Message broker for asynchronous communication in MonitoringAPI."
        sql_database = softwareSystem "SQL Database" "Stores logs, metrics, and traces."

        # Relationships for Level 1 (System Context)
        developer -> monitoring_api "Uses via web application"
        monitoring_api -> rabbitmq "Publishes log messages asynchronously"
        monitoring_api -> logging_service "Sends HTTP requests to"
        monitoring_api -> metrics_service "Sends HTTP requests to"
        monitoring_api -> tracing_service "Sends HTTP requests to"
        logging_service -> sql_database "Stores logs in"
        metrics_service -> sql_database "Stores metrics in"
        tracing_service -> sql_database "Stores tracing data in"

        # Define relationships between components within Monitoring API
        logging_controller -> log_service_requester "Requests logs from Logging Service via HTTP"
        logging_controller -> message_publisher "Publishes log events to RabbitMQ"

        # Define relationships within Logging Service
        log_events_controller -> log_service "Retrieves logs via HTTP"
        log_service -> sql_database "Stores and retrieves logs"
        # Define relationships within Metrics Service
        metrics_events_controller -> metrics_event_service "Retrieves metrics via HTTP"
        metrics_event_service -> sql_database "Stores and retrieves metrics"
        # Define relationships within Tracing Service
        tracing_events_controller -> tracing_event_service "Retrieves traces via HTTP"
        tracing_event_service -> sql_database "Stores and retrieves traces"
    }

    views {
        # System Context (Level 1)
        systemContext monitoring_system {
            include *
            autoLayout
        }

        # Container View (Level 2)
        container monitoring_system {
            include *
            autoLayout
        }

        # Component View for Monitoring API (Level 3)
        component monitoring_api {
            include *
            autoLayout
        }

        # Component View for Logging Service (Level 3)
        component logging_service {
            include *
            autoLayout
        }
        # Component View for Metrics Service (Level 3)
        component metrics_service {
            include *
            autoLayout
        }
        # Component View for Tracing Service (Level 3)
        component tracing_service {
            include *
            autoLayout
        }
        theme default
    }
}
